res_sim_sn_a <- PERFect_sim(X=Counts,  Order="NP",  nbins = 30, col = "red",
fill = "green", alpha = 0.1, distr = "sn",
quant = c(0.05,0.10, 0.25), hist_fill =0.2, linecol = "blue",
lag = 3, direction ="left")
end <-  Sys.time()-start
summary_sim_sn_a <- resSummary(X = Counts, filtX = res_sim_sn_a$filtX,
taxaInfo = taxaInfo, time = end)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_a$pvals, alpha = 0.05, Order = "NP")
summary_sim_sn_a_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_a$pvals, alpha = 0.15, Order = "NP")
summary_sim_sn_a_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit b
##########################
start <- Sys.time()
res_sim_sn_b <- PERFect_sim(X=Counts,  Order="NP",  nbins = 30, col = "red",
fill = "green", alpha = 0.1, distr = "sn",
quant = c(0.1,0.25, 0.40), hist_fill =0.2, linecol = "blue",
lag = 3, direction ="left")
end <-  Sys.time()-start
#results for sumultaneous PERFect with NP ordering
summary_sim_sn_b <- resSummary(X = Counts, filtX = res_sim_sn_b$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_b$pvals, alpha = 0.05, Order = "NP")
summary_sim_sn_b_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_b$pvals, alpha = 0.15, Order = "NP")
summary_sim_sn_b_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit c
##########################
start <- Sys.time()
res_sim_sn_c <- PERFect_sim(X=Counts,  Order="NP",  nbins = 30, col = "red",
fill = "green", alpha = 0.1, distr = "sn",
quant = c(0.1,0.25, 0.50), hist_fill =0.2, linecol = "blue",
lag = 3, direction ="left")
end <-  Sys.time()-start
#results for sumultaneous PERFect with NP ordering
summary_sim_sn_c <- resSummary(X = Counts, filtX = res_sim_sn_c$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_c$pvals, alpha = 0.05, Order = "NP")
summary_sim_sn_c_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_c$pvals, alpha = 0.15, Order = "NP")
summary_sim_sn_c_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit d
##########################
start <- Sys.time()
res_sim_sn_d <- PERFect_sim(X=Counts,  Order="NP",  nbins = 30, col = "red",
fill = "green", alpha = 0.1, distr = "sn",
quant = c(0.20,0.30, 0.60), hist_fill =0.2, linecol = "blue",
lag = 3, direction ="left")
end <-  Sys.time()-start
#results for sumultaneous PERFect with NP ordering
summary_sim_sn_d <- resSummary(X = Counts, filtX = res_sim_sn_d$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_d$pvals, alpha = 0.05, Order = "NP")
summary_sim_sn_d_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_d$pvals, alpha = 0.15, Order = "NP")
summary_sim_sn_d_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit a
##########################
start <- Sys.time()
res_sim_sn_a_pvals <- PERFect_sim(X=Counts,  Order="pvals",  nbins = 30, col = "red",
fill = "green", alpha = 0.1, distr = "sn", pvals_sim = res_sim_sn_a,
quant = c(0.05,0.10, 0.25), hist_fill =0.2, linecol = "blue",
lag = 3, direction ="left")
end <-  Sys.time()-start
summary_sim_sn_a_pvals <- resSummary(X = Counts, filtX = res_sim_sn_a_pvals$filtX,
taxaInfo = taxaInfo,  time = end)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_a_pvals$pvals, alpha = 0.05)
summary_sim_sn_a_0.05_pvals <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_a_pvals$pvals, alpha = 0.15)
summary_sim_sn_a_0.15_pvals <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit b
##########################
start <- Sys.time()
res_sim_sn_b_pvals <- PERFect_sim(X=Counts,  Order="pvals",  nbins = 30, col = "red",
fill = "green", alpha = 0.1, distr = "sn", pvals_sim = res_sim_sn_b,
quant = c(0.1,0.25, 0.40), hist_fill =0.2, linecol = "blue",
lag = 3, direction ="left")
end <-  Sys.time()-start
#results for sumultaneous PERFect with NP ordering
summary_sim_sn_b_pvals <- resSummary(X = Counts, filtX = res_sim_sn_b_pvals$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_b_pvals$pvals, alpha = 0.05)
summary_sim_sn_b_0.05_pvals <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_b_pvals$pvals, alpha = 0.15)
summary_sim_sn_b_0.15_pvals <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit c
##########################
start <- Sys.time()
res_sim_sn_c_pvals <- PERFect_sim(X=Counts,  Order="pvals",  nbins = 30, col = "red",
fill = "green", alpha = 0.1, distr = "sn", pvals_sim = res_sim_sn_c,
quant = c(0.1,0.25, 0.50), hist_fill =0.2, linecol = "blue",
lag = 3, direction ="left")
end <-  Sys.time()-start
#results for sumultaneous PERFect with NP ordering
summary_sim_sn_c_pvals <- resSummary(X = Counts, filtX = res_sim_sn_c_pvals$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_c_pvals$pvals, alpha = 0.05)
summary_sim_sn_c_0.05_pvals <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_c_pvals$pvals, alpha = 0.15)
summary_sim_sn_c_0.15_pvals <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit d
##########################
start <- Sys.time()
res_sim_sn_d_pvals <- PERFect_sim(X=Counts,  Order="pvals",  nbins = 30, col = "red",
fill = "green", alpha = 0.1, distr = "sn", pvals_sim = res_sim_sn_b,
quant = c(0.20,0.30, 0.60), hist_fill =0.2, linecol = "blue",
lag = 3, direction ="left")
end <-  Sys.time()-start
#results for sumultaneous PERFect with NP ordering
summary_sim_sn_d_pvals <- resSummary(X = Counts, filtX = res_sim_sn_d_pvals$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_d_pvals$pvals, alpha = 0.05)
summary_sim_sn_d_0.05_pvals <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo, time = NA)
filtX <- filt_pval(X = Counts, pvals =res_sim_sn_d_pvals$pvals, alpha = 0.15)
summary_sim_sn_d_0.15_pvals <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#Manual fit to display all 4 quantile fits on one graph
hist <- res_sim_sn_a$hist + stat_function(fun = dsn, aes(linetype = "Q1"),
args = list(xi = res_sim_sn_a$est[1], omega = res_sim_sn_a$est[2],
alpha = res_sim_sn_a$est[3]), colour="blue")+
stat_function(fun = dsn, aes(linetype = "Q2"),
args = list(xi = res_sim_sn_b$est[1], omega = res_sim_sn_b$est[2],
alpha = res_sim_sn_b$est[3]), colour="blue")+
stat_function(fun = dsn, aes(linetype = "Q3"),
args = list(xi = res_sim_sn_c$est[1], omega = res_sim_sn_c$est[2],
alpha = res_sim_sn_c$est[3]), colour="blue")+
stat_function(fun = dsn, aes(linetype = "Q4"),
args = list(xi = res_sim_sn_d$est[1], omega = res_sim_sn_d$est[2],
alpha = res_sim_sn_d$est[3]), colour="blue")+
scale_linetype_manual("", values = c("solid", "dashed", "dotted", "twodash"),
labels = c("5%, 10%, 25%", "10%, 25%, 40%",
"10%, 25%, 50%", "20%, 30%, 60%"))+
theme(legend.position=c(0.6,0.8))
hist
ggsave("~/Dropbox/PERFect/RCode/Responses/Plots/Quantiles_mock2.pdf")
start <- Sys.time()
res_perm_a <- PERFect_perm(X=Counts,  Order="NP",  nbins = 30, col = "red", k = 10000,
fill = "green", alpha = 0.1, distr = "sn",
quant = c(0.05,0.10, 0.25), hist_fill =0.2, linecol = "blue",
lag = 3, direction ="left")
(end <-  Sys.time()-start)
#start <- Sys.time()
#res_perm_a_test <- PERFect_perm(X=Counts,  Order="NP",  nbins = 30, col = "red", k = 10000,
#                       fill = "green", alpha = 0.1, distr = "sn", sample = TRUE,
#                       quant = c(0.05,0.10, 0.25), hist_fill =0.2, linecol = "blue",
#                        lag = 3, direction ="left")
#(end <-  Sys.time()-start)
#save results
#saveRDS(res_perm_a, file = paste0(pathtodata, "res_perm_mock2_a.RDS"))
#saveRDS(end, file = paste0(pathtodata, "time_mock2_a.RDS"))
#read results for faster processing
#res_perm_a <- readRDS(file = paste0(pathtodata, "res_perm_mock2_a.RDS"))
#end <- readRDS(file = paste0(pathtodata, "time_mock2_a.RDS"))
#very normal looking for these data
#res_perm_a$hist[[200]]
#results for permutation PERFect with NP ordering
summary_perm_np_a <- resSummary(X = Counts, filtX = res_perm_a$filtX,
taxaInfo = taxaInfo,  time = end)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_perm_a$pvals, alpha = 0.05, Order = "NP")
summary_perm_np_a_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo, time = NA)
filtX <- filt_pval(X = Counts, pvals =res_perm_a$pvals, alpha = 0.15, Order = "NP")
summary_perm_np_a_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit b
##########################
start <- Sys.time()
res_perm_b <- PERFect_perm(X=Counts,  Order="NP",  nbins = 30, col = "red",
fill = "green", alpha = 0.1, distr = "sn",
quant = c(0.1,0.25, 0.40), hist_fill =0.2, linecol = "blue",
dfl_distr = res_perm_a$dfl_distr,
lag = 3, direction ="left")
(end <-  Sys.time()-start)
#saveRDS(res_perm_b, file = paste0(pathtodata, "res_perm_mock2_b.RDS"))
#read results for faster processing
#res_perm_b <- readRDS(file = paste0(pathtodata, "res_perm_mock2_b.RDS"))
#results for sumultaneous PERFect with NP ordering
summary_perm_np_b <- resSummary(X = Counts, filtX = res_perm_b$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_perm_b$pvals, alpha = 0.05, Order = "NP")
summary_perm_np_b_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_perm_b$pvals, alpha = 0.15, Order = "NP")
summary_perm_np_b_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit c
##########################
start <- Sys.time()
res_perm_c <- PERFect_perm(X=Counts,  Order="NP",  nbins = 30, col = "red",
fill = "green", alpha = 0.1, distr = "sn",
quant = c(0.1,0.25, 0.50), hist_fill =0.2, linecol = "blue",
dfl_distr = res_perm_a$dfl_distr, lag = 3, direction ="left")
(end <-  Sys.time()-start)
#saveRDS(res_perm_c, file = paste0(pathtodata, "res_perm_mock2_c.RDS"))
#read results for faster processing
#res_perm_c <- readRDS(file = paste0(pathtodata, "res_perm_mock2_c.RDS"))
#results for sumultaneous PERFect with NP ordering
summary_perm_np_c <- resSummary(X = Counts, filtX = res_perm_c$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_perm_c$pvals, alpha = 0.05, Order = "NP")
summary_perm_np_c_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_perm_c$pvals, alpha = 0.15, Order = "NP")
summary_perm_np_c_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit d
##########################
start <- Sys.time()
res_perm_d <- PERFect_perm(X=Counts,  Order="NP",  nbins = 30, col = "red",
fill = "green", alpha = 0.1, distr = "sn",
quant = c(0.20,0.30, 0.60), hist_fill =0.2, linecol = "blue",
dfl_distr = res_perm_a$dfl_distr, lag = 3, direction ="left")
(end <-  Sys.time()-start)
#saveRDS(res_perm_d, file = paste0(pathtodata, "res_perm_mock2_d.RDS"))
#read results for faster processing
#res_perm_d <- readRDS(file = paste0(pathtodata, "res_perm_mock2_d.RDS"))
#results for sumultaneous PERFect with NP ordering
summary_perm_np_d <- resSummary(X = Counts, filtX = res_perm_d$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_perm_d$pvals, alpha = 0.05, Order = "NP")
summary_perm_np_d_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_perm_d$pvals, alpha = 0.15, Order = "NP")
summary_perm_np_d_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
start <- Sys.time()
res_perm_pvals_a <- PERFect_perm_reorder(X=Counts,  Order = "pvals",
pvals_sim = res_sim_sn_a,
res_perm = res_perm_a, alpha = 0.1, distr = "sn",
lag = 3, direction ="left")
end <-  Sys.time()-start
#results for permutation PERFect with NP ordering
summary_perm_pvals_a <- resSummary(X = Counts, filtX = res_perm_pvals_a$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_perm_pvals_a$pvals, alpha = 0.05,
Order = "pvals",pvals_sim =res_sim_sn_a)
summary_perm_pvals_a_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_perm_pvals_a$pvals, alpha = 0.15,
Order = "pvals",pvals_sim =res_sim_sn_a)
summary_perm_pvals_a_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit b
##########################
start <- Sys.time()
res_perm_pvals_b <- PERFect_perm_reorder(X=Counts,  Order = "pvals",
pvals_sim = res_sim_sn_b,
res_perm = res_perm_b, alpha = 0.1, distr = "sn",
lag = 3, direction ="left")
end <-  Sys.time()-start
#results for permutation PERFect with NP ordering
summary_perm_pvals_b <- resSummary(X = Counts, filtX = res_perm_pvals_b$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_perm_pvals_b$pvals, alpha = 0.05,
Order = "pvals",pvals_sim =res_sim_sn_b)
summary_perm_pvals_b_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_perm_pvals_b$pvals, alpha = 0.15,
Order = "pvals", pvals_sim =res_sim_sn_b)
summary_perm_pvals_b_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit c
##########################
start <- Sys.time()
res_perm_pvals_c <- PERFect_perm_reorder(X=Counts,  Order = "pvals",
pvals_sim = res_sim_sn_c,
res_perm = res_perm_c, alpha = 0.1, distr = "sn",
lag = 3, direction ="left")
end <-  Sys.time()-start
#results for permutation PERFect with NP ordering
summary_perm_pvals_c <- resSummary(X = Counts, filtX = res_perm_pvals_c$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_perm_pvals_c$pvals, alpha = 0.05,
Order = "pvals",pvals_sim =res_sim_sn_c)
summary_perm_pvals_c_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_perm_pvals_c$pvals, alpha = 0.15,
Order = "pvals",pvals_sim =res_sim_sn_c)
summary_perm_pvals_c_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
#########################
#quantiles from fit d
##########################
start <- Sys.time()
res_perm_pvals_d <- PERFect_perm_reorder(X=Counts,  Order = "pvals",
pvals_sim = res_sim_sn_d,
res_perm = res_perm_d, alpha = 0.1, distr = "sn",
lag = 3, direction ="left")
end <-  Sys.time()-start
#results for permutation PERFect with NP ordering
summary_perm_pvals_d <- resSummary(X = Counts, filtX = res_perm_pvals_d$filtX,
taxaInfo = taxaInfo,  time = NA)
#apply two more p-values thresholds
filtX <- filt_pval(X = Counts, pvals =res_perm_pvals_d$pvals, alpha = 0.05,
Order = "pvals",pvals_sim =res_sim_sn_d)
summary_perm_pvals_d_0.05 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
filtX <- filt_pval(X = Counts, pvals =res_perm_pvals_d$pvals, alpha = 0.15,
Order = "pvals",pvals_sim =res_sim_sn_d)
summary_perm_pvals_d_0.15 <- resSummary(X = Counts, filtX = filtX,
taxaInfo = taxaInfo,  time = NA)
start <- Sys.time()
#traditional filtering
res_trad <- TraditR1(Counts, thresh =5)
end <-  Sys.time()-start
#results for traditional filtering with NP ordering
summary_trad_r1 <- resSummary(X = Counts, filtX = res_trad,
taxaInfo = taxaInfo,  time = end)
#traditional filtering
start <- Sys.time()
res_trad <- TraditR2(Counts)
end <-  Sys.time()-start
#results for traditional filtering with NP ordering
summary_trad_r2 <- resSummary(X = Counts, filtX = res_trad,
taxaInfo = taxaInfo,  time = end)
df <- rbind(summary_sim_sn_a_0.15$res,summary_sim_sn_b_0.15$res,
summary_sim_sn_c_0.15$res,summary_sim_sn_d_0.15$res,
summary_sim_sn_a$res,summary_sim_sn_b$res,
summary_sim_sn_c$res,summary_sim_sn_d$res,
summary_sim_sn_a_0.05$res,summary_sim_sn_b_0.05$res,
summary_sim_sn_c_0.05$res,summary_sim_sn_d_0.05$res,
summary_sim_sn_a_0.15_pvals$res,summary_sim_sn_b_0.15_pvals$res,
summary_sim_sn_c_0.15_pvals$res,summary_sim_sn_d_0.15_pvals$res,
summary_sim_sn_a_pvals$res,summary_sim_sn_b_pvals$res,
summary_sim_sn_c_pvals$res,summary_sim_sn_d_pvals$res,
summary_sim_sn_a_0.05_pvals$res,summary_sim_sn_b_0.05_pvals$res,
summary_sim_sn_c_0.05_pvals$res,summary_sim_sn_d_0.05_pvals$res,
summary_perm_np_a_0.15$res, summary_perm_np_b_0.15$res,
summary_perm_np_c_0.15$res, summary_perm_np_d_0.15$res,
summary_perm_np_a$res, summary_perm_np_b$res,
summary_perm_np_c$res, summary_perm_np_d$res,
summary_perm_np_a_0.05$res, summary_perm_np_b_0.05$res,
summary_perm_np_c_0.05$res, summary_perm_np_d_0.05$res,
summary_perm_pvals_a_0.15$res,summary_perm_pvals_b_0.15$res,
summary_perm_pvals_c_0.15$res,summary_perm_pvals_d_0.15$res,
summary_perm_pvals_a$res,summary_perm_pvals_b$res,
summary_perm_pvals_c$res,summary_perm_pvals_d$res,
summary_perm_pvals_a_0.05$res,summary_perm_pvals_b_0.05$res,
summary_perm_pvals_c_0.05$res,summary_perm_pvals_d_0.05$res,
summary_trad_r1$res, summary_trad_r2$res)
rownames(df) <- c("PERFect_sim_a_0.15", "PERFect_sim_b_0.15",
"PERFect_sim_c_0.15", "PERFect_sim_d_0.15",
"PERFect_sim_a_0.10", "PERFect_sim_b_0.10",
"PERFect_sim_c_0.10", "PERFect_sim_d_0.10",
"PERFect_sim_a_0.05", "PERFect_sim_b_0.05",
"PERFect_sim_c_0.05", "PERFect_sim_d_0.05",
"PERFect_sim_a_pvals_0.15", "PERFect_sim_b_pvals_0.15",
"PERFect_sim_c_pvals_0.15", "PERFect_sim_d_pvals_0.15",
"PERFect_sim_a_pvals_0.10", "PERFect_sim_b_pvals_0.10",
"PERFect_sim_c_pvals_0.10", "PERFect_sim_d_pvals_0.10",
"PERFect_sim_a_pvals_0.05", "PERFect_sim_b_pvals_0.05",
"PERFect_sim_c_pvals_0.05", "PERFect_sim_d_pvals_0.05",
"PERFect_perm_np_a_0.15","PERFect_perm_np_b_0.15",
"PERFect_perm_np_c_0.15","PERFect_perm_np_d_0.15",
"PERFect_perm_np_a_0.10","PERFect_perm_np_b_0.10",
"PERFect_perm_np_c_0.10","PERFect_perm_np_d_0.10",
"PERFect_perm_np_a_0.05","PERFect_perm_np_b_0.05",
"PERFect_perm_np_c_0.05","PERFect_perm_np_d_0.05",
"PERFect_perm_pvals_a_0.15","PERFect_perm_pvals_b_0.15",
"PERFect_perm_pvals_c_0.15","PERFect_perm_pvals_d_0.15",
"PERFect_perm_pvals_a_0.10","PERFect_perm_pvals_b_0.10",
"PERFect_perm_pvals_c_0.10","PERFect_perm_pvals_d_0.10",
"PERFect_perm_pvals_a_0.05","PERFect_perm_pvals_b_0.05",
"PERFect_perm_pvals_c_0.05","PERFect_perm_pvals_d_0.05",
"Trad_R1", "Trad_R2")
df[,c(3,5)] <- round(df[,c(3,5)], 4)*100
#kable(df,format="latex",booktabs=TRUE,caption="Sourcetracker results: estimated proportion of taxa from each environment in NICU samples (Knights et al, 2011)") %>% kable_styling(latex_options = c("striped", "hold_position"))
names_spaced <- c(
'Total number<br/>of taxa', '# of taxa <br/> preserved',
'Percentage of <br/> filtered taxa',
'# of true taxa',
'Percentage of <br/> contaminant taxa')
kable(df,
format='html',
digits=2,
row.names=TRUE,
align='lcccc',
col.names = names_spaced,
escape = FALSE)
res_mock2 <- df
saveRDS(res_mock2, file = paste0(pathtodata, "test_mock2.RDS"))
df <- data.frame(summary_sim_sn_a$time, summary_perm_np_a$time,
summary_trad_r1$time, summary_trad_r2$time)
names(df) <- c("Simultaneous PERFect", "Permutation PERFect",
"Traditional Rule 1", "Traditional Rule 2")
names_spaced <- c(
'PERFect<br/> Simultaneous', 'PERFect<br/> Permutation',
'Traditional<br/> Rule 1', 'Traditional<br/> Rule 2')
kable(df,
format='html',
digits=4,
row.names=FALSE,
align='ccccc',
col.names = names_spaced,
escape = FALSE)
Counts<-as.matrix(Counts)
#p-values ordering
res_sim_pvals <- PERFect_sim(X=Counts, Order = "pvals", pvals_sim = res_sim_sn_c)
summary_sim_pvals <- resSummary(X = Counts, filtX = res_sim_pvals$filtX, time = end, taxaInfo = taxaInfo)
#NC ordering
res_sim_nc <- PERFect_sim(X=Counts, Order = "NC")
summary_sim_nc <- resSummary(X = Counts, filtX = res_sim_nc$filtX, time = end, taxaInfo = taxaInfo)
#NCw ordering
res_sim_ncw <- PERFect_sim(X=Counts, Order = "NCw")
summary_sim_ncw <- resSummary(X = Counts, filtX = res_sim_ncw$filtX, time = end, taxaInfo = taxaInfo)
#NC ordering
res_perm_nc <- PERFect_perm_reorder(X=Counts, Order = "NC", res_perm = res_perm_c)
summary_perm_nc <- resSummary(X = Counts, filtX = res_perm_nc$filtX, time = end, taxaInfo = taxaInfo)
#NCw ordering
res_perm_ncw <- PERFect_perm_reorder(X=Counts, Order = "NCw", res_perm = res_perm_c)
summary_perm_ncw <- resSummary(X = Counts, filtX = res_perm_ncw$filtX, time = end, taxaInfo = taxaInfo)
df <- rbind(summary_sim_sn_c$res,
summary_sim_pvals$res,
summary_sim_nc$res,
summary_sim_ncw$res,
summary_perm_np_c$res,
summary_perm_pvals_c$res,
summary_perm_nc$res,
summary_perm_ncw$res)
rownames(df) <- c("PERFect_sim_np",
"PERFect_sim_pvals",
"PERFect_sim_nc",
"PERFect_sim_ncw",
"PERFect_perm_np",
"PERFect_perm_pvals",
"PERFect_perm_nc",
"PERFect_perm_ncw")
df[,c(3,5)] <- round(df[,c(3,5)], 4)*100
names_spaced <- c(
'Total number<br/>of taxa', '# of taxa <br/> preserved',
'Percentage of <br/> filtered taxa',
'# of true taxa',
'Percentage of <br/> contaminant taxa')
kable(df,
format='html',
digits=2,
row.names=TRUE,
align='lcccc',
col.names = names_spaced,
escape = FALSE)
commontaxa <- Reduce(intersect, list(colnames(res_sim_sn_c$filtX),
colnames(res_sim_pvals$filtX),
colnames(res_sim_nc$filtX),
colnames(res_sim_ncw$filtX),
colnames(res_perm_c$filtX),
colnames(res_perm_pvals_c$filtX),
colnames(res_perm_nc$filtX),
colnames(res_perm_ncw$filtX)))
length(commontaxa)
X <- as.matrix(Counts)
l <- list(NP = NP_Order(X), pvals = pvals_Order(X, res_sim_sn_c),
NC = NC_Order(X), NCw = NCw_Order(X))
TrueComp2 <- c("Sneathia.amnii", "Lactobacillus.iners",
"Streptococcus.agalactiae",
"Lactobacillus.crispatus_cluster", "Atopobium.vaginae",
"Prevotella.bivia", "Gardnerella.vaginalis")
#rank true taxa
ranks <- sapply(l, function(x) match(TrueComp2, rev(x)))
rownames(ranks) <- TrueComp2
names_spaced <- c(
'Abundance (NP)', 'p-values',
'Number of <br/>connected taxa (NC)',
'Weighted number of <br/>connected taxa (NCw)')
kable(ranks,
format='html',
digits=2,
row.names=TRUE,
align='cccc',
col.names = names_spaced,
escape = FALSE)
